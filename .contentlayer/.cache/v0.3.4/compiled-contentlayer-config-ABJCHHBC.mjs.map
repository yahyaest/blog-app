{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { makeSource, defineDocumentType } from \"@contentlayer/source-files\";\nimport readingTime from \"reading-time\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\nimport GithubSlugger from \"github-slugger\";\n\nconst Blog = defineDocumentType(() => ({\n  name: \"Blog\",\n  filePathPattern: \"**/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    publishedAt: {\n      type: \"date\",\n      required: true,\n    },\n    updatedAt: {\n      type: \"date\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    image: { type: \"image\" },\n    isPublished: {\n      type: \"boolean\",\n      default: true,\n    },\n    author: {\n      type: \"string\",\n      required: true,\n    },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\" },\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`,\n    },\n    readingTime: {\n      type: \"json\",\n      resolve: (doc) => readingTime(doc.body.raw),\n    },\n    toc: {\n      type: \"json\",\n      resolve: async (doc) => {\n        const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n        const slugger = new GithubSlugger();\n        const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(\n          ({ groups }: any) => {\n            const flag = groups?.flag;\n            const content = groups?.content;\n\n            return {\n              level:\n                flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : flag?.length == 3 ? \"three\" : \"four\",\n              text: content,\n              slug: content ? slugger.slug(content) : undefined,\n            };\n          }\n        );\n\n        return headings;\n      },\n    },\n  },\n}));\n\nconst codeOptions = {\n  theme: \"github-dark\",\n  grid: false,\n};\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Blog],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: \"append\" }],\n      [rehypePrettyCode as any, codeOptions],\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,YAAY,0BAA0B;AAC/C,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,mBAAmB;AAE1B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO,EAAE,MAAM,QAAQ;AAAA,IACvB,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACvB;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACpD;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC5C;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACtB,cAAM,YAAY;AAClB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,SAAS,CAAC,EAAE;AAAA,UAC5D,CAAC,EAAE,OAAO,MAAW;AACnB,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AAExB,mBAAO;AAAA,cACL,OACE,MAAM,UAAU,IAAI,QAAQ,MAAM,UAAU,IAAI,QAAQ,MAAM,UAAU,IAAI,UAAU;AAAA,cACxF,MAAM;AAAA,cACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAM,cAAc;AAAA,EAClB,OAAO;AAAA,EACP,MAAM;AACR;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA,CAAC,wBAAwB,EAAE,UAAU,SAAS,CAAC;AAAA,MAC/C,CAAC,kBAAyB,WAAW;AAAA,IACvC;AAAA,EACF;AACF,CAAC;",
  "names": []
}
